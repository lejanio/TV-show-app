{"version":3,"sources":["img/logo.svg","components/ShowGrid/ShowGrid.tsx","components/SearchBar/SearchBar.tsx","components/Button/Button.tsx","components/Main/Main.tsx","pages/NotFound/NotFound.tsx","components/Table/Table.tsx","pages/Show/Show.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ShowGrid","items","className","map","item","to","show","id","name","image","src","placeholder","alt","original","icon","faInfoCircle","summary","replace","tagReplaceRegex","slice","concat","SearchBar","getQuery","useState","searchText","setSearchText","type","value","onChange","e","searchValue","target","Button","children","Main","filteredShows","setFilteredShows","query","setQuery","fetchItems","a","axios","get","filteredResult","data","onSubmit","preventDefault","length","NotFound","Table","episodes","episode","season","number","initialShow","genres","status","medium","Show","setShow","setEpisodes","useParams","useEffect","fetchShow","result","episodesResult","App","logo","width","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe4eb696.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.65dc87d5.svg\";","import React, { FC } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\nimport { Link } from 'react-router-dom';\nimport { Item, tagReplaceRegex } from '../Main/Main';\nimport './ShowGrid.scss';\nimport placeholder from '../../img/logo.svg';\n\ntype CharacterGridType = {\n    items: Item[];\n}\n\nconst ShowGrid:FC<CharacterGridType> = ({ items }) => (\n\n  <div className=\"cards\">\n    {items.map((item) => (\n      <Link key={item.show.id} to={`/shows/${item.show.id}`}>\n        <div\n          className=\"card\"\n        >\n          <span className=\"card__heading\">\n            {item.show.name}\n          </span>\n          <div className=\"card__image-container\">\n            {(item.show.image === null)\n              ? (\n                <img src={placeholder} alt=\"placeholder\" className=\"card__image--alternative\" />\n              )\n              : (\n                <img src={item.show.image.original} alt=\"show\" className=\"card__image\" />\n              )}\n          </div>\n          <FontAwesomeIcon icon={faInfoCircle} className=\"card__info-icon\" />\n          <p className=\"card__summary\">\n            {(!item.show.summary)\n              ? (\n                <span>(Summary not available)</span>\n              )\n              : (\n                item.show.summary.replace(tagReplaceRegex, '').slice(0, 70).concat('...')\n              )}\n          </p>\n        </div>\n      </Link>\n    ))}\n  </div>\n);\n\nexport default ShowGrid;\n","import React, { FC, useState } from 'react';\nimport './SearchBar.scss';\n\ntype SearchBarType = {\n  getQuery: (searchValue: string) => void;\n}\n\nconst SearchBar:FC<SearchBarType> = ({ getQuery }) => {\n  const [searchText, setSearchText] = useState('');\n\n  const onChange = (searchValue: string) => {\n    setSearchText(searchValue);\n    getQuery(searchValue);\n  };\n\n  return (\n    <input\n      type=\"text\"\n      placeholder=\"Search shows by title...\"\n      value={searchText}\n      onChange={(e) => onChange(e.target.value)}\n      className=\"search-bar\"\n    />\n  );\n};\n\nexport default SearchBar;\n","import React, { FC } from 'react';\nimport './Button.scss';\n\ntype ButtonType = {\n  type: 'submit';\n}\n\nconst Button:FC<ButtonType> = ({ children, type }) => (\n  <button\n    type={type}\n    className=\"button\"\n  >\n    {children}\n  </button>\n);\n\nexport default Button;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './Main.scss';\nimport ShowGrid from '../ShowGrid/ShowGrid';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Button from '../Button/Button';\n\nexport type Item = {\n  show: {\n  id: number;\n  name: string;\n  image: {\n    medium: string;\n    original: string;\n  };\n  type: string;\n  summary: string;\n  }\n}\n\n// this regex is intended for finding html tags in the summary text that is received from API\n\nexport const tagReplaceRegex = /(<([^>]+)>)/ig;\n\nconst Main = () => {\n  const [filteredShows, setFilteredShows] = useState<Item[]>([]);\n  const [query, setQuery] = useState('');\n\n  const fetchItems = async () => {\n    const filteredResult = await axios.get(`https://api.tvmaze.com/search/shows?q=${query}`);\n\n    setFilteredShows(filteredResult.data);\n  };\n\n  const handleSearch = () => {\n    fetchItems();\n  };\n\n  return (\n    <>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          handleSearch();\n        }}\n        className=\"form--container\"\n      >\n        <SearchBar\n          getQuery={(searchValue) => setQuery(searchValue)}\n        />\n        <Button\n          type=\"submit\"\n        >\n          Search\n        </Button>\n      </form>\n      <div>\n        {(filteredShows.length > 0)\n              && (\n              <ShowGrid\n                items={filteredShows}\n              />\n              )}\n      </div>\n    </>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport './NotFound.scss';\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => (\n  <div className=\"show--container\">\n    <nav>\n      <Link to=\"/TV-show-app\" className=\"link\">&lt; Back to search</Link>\n    </nav>\n    <div className=\"error-message--container\">\n      <span className=\"error-message\">404 - Page not found</span>\n    </div>\n  </div>\n);\n\nexport default NotFound;\n","import React, { FC } from 'react';\nimport './Table.scss';\nimport { EpisodeType } from '../../pages/Show/Show';\n\ntype TableType = {\n    episodes: EpisodeType[];\n}\n\nconst Table:FC<TableType> = ({ episodes }) => (\n  <table>\n    <thead>\n      <tr>\n        <th>Season</th>\n        <th>Episode</th>\n        <th>Title</th>\n      </tr>\n    </thead>\n    <tbody>\n      {episodes.map((episode) => (\n        <tr key={episode.id}>\n          <td>{episode.season}</td>\n          <td>{episode.number}</td>\n          <td>{episode.name}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n\nexport default Table;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Link, useParams } from 'react-router-dom';\nimport { tagReplaceRegex } from '../../components/Main/Main';\nimport './Show.scss';\nimport placeholder from '../../img/logo.svg';\nimport Table from '../../components/Table/Table';\n\ntype ShowType = {\n    id: number;\n    name: string;\n    genres: string[];\n    status: string;\n    image: {\n        medium: string;\n        original: string;\n    };\n    summary: string;\n}\n\nexport type EpisodeType = {\n    id: number;\n    season: number;\n    number: number;\n    name: string;\n}\n\nconst initialShow = {\n  id: 0,\n  name: '',\n  genres: [''],\n  status: '',\n  image: {\n    medium: '',\n    original: '',\n  },\n  summary: '',\n};\n\nconst Show = () => {\n  const [show, setShow] = useState<ShowType>(initialShow);\n  const [episodes, setEpisodes] = useState<EpisodeType[]>([]);\n  const { id } = useParams<'id'>();\n\n  useEffect(() => {\n    const fetchShow = async () => {\n      const result = await axios.get(`https://api.tvmaze.com/shows/${id}`);\n      const episodesResult = await axios.get(`https://api.tvmaze.com/shows/${id}/episodes`);\n\n      setShow(result.data);\n      setEpisodes(episodesResult.data);\n    };\n\n    fetchShow();\n  }, []);\n\n  return (\n    <div className=\"show--container\">\n      <nav>\n        <Link to=\"/TV-show-app\" className=\"link\">&lt; Back to search</Link>\n      </nav>\n      <h1 className=\"show__heading\">\n        {show.name}\n      </h1>\n      <div className=\"show__image-container\">\n        {(show.image === null)\n          ? (<img src={placeholder} alt=\"placeholder\" className=\"show__image\" />)\n          : (<img src={show.image.original} alt=\"show\" className=\"show__image\" />)}\n      </div>\n      <div className=\"show__information\">\n        <div className=\"show__summary-section\">\n          <h2>\n            Summary:\n          </h2>\n          <p>\n            {(!show.summary)\n              ? (\n                <span>(Summary not available)</span>\n              )\n              : (\n                show.summary.replace(tagReplaceRegex, '')\n              )}\n          </p>\n        </div>\n        <div className=\"show__episodes-section\">\n          <h2>\n            Seasons and episodes:\n          </h2>\n          <Table\n            episodes={episodes}\n          />\n        </div>\n      </div>\n\n    </div>\n  );\n};\n\nexport default Show;\n","import React from 'react';\nimport { Routes, Route, Link } from 'react-router-dom';\nimport './App.scss';\nimport Main from './components/Main/Main';\nimport logo from './img/logo.svg';\nimport './utils/reset.scss';\nimport NotFound from './pages/NotFound/NotFound';\nimport Show from './pages/Show/Show';\n\nconst App = () => (\n  <div className=\"app\">\n    <div className=\"logo-container\">\n      <img src={logo} alt=\"\" width=\"350px\" />\n    </div>\n    <Routes>\n      <Route path=\"/TV-show-app\" element={<Main />} />\n      <Route path=\"/shows/:id\" element={<Show />} />\n      <Route path=\"/404\" element={<NotFound />} />\n      <Route path=\"*\" element={<NotFound />} />\n    </Routes>\n  </div>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}